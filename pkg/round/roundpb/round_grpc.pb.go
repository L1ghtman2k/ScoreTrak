// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package roundpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RoundServiceClient is the client API for RoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoundServiceClient interface {
	GetLastNonElapsingRound(ctx context.Context, in *GetLastNonElapsingRoundRequest, opts ...grpc.CallOption) (*GetLastNonElapsingRoundResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error)
	GetLastRound(ctx context.Context, in *GetLastRoundRequest, opts ...grpc.CallOption) (*GetLastRoundResponse, error)
}

type roundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoundServiceClient(cc grpc.ClientConnInterface) RoundServiceClient {
	return &roundServiceClient{cc}
}

func (c *roundServiceClient) GetLastNonElapsingRound(ctx context.Context, in *GetLastNonElapsingRoundRequest, opts ...grpc.CallOption) (*GetLastNonElapsingRoundResponse, error) {
	out := new(GetLastNonElapsingRoundResponse)
	err := c.cc.Invoke(ctx, "/pkg.round.roundpb.RoundService/GetLastNonElapsingRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roundServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/pkg.round.roundpb.RoundService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roundServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error) {
	out := new(GetByIDResponse)
	err := c.cc.Invoke(ctx, "/pkg.round.roundpb.RoundService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roundServiceClient) GetLastRound(ctx context.Context, in *GetLastRoundRequest, opts ...grpc.CallOption) (*GetLastRoundResponse, error) {
	out := new(GetLastRoundResponse)
	err := c.cc.Invoke(ctx, "/pkg.round.roundpb.RoundService/GetLastRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoundServiceServer is the server API for RoundService service.
// All implementations must embed UnimplementedRoundServiceServer
// for forward compatibility
type RoundServiceServer interface {
	GetLastNonElapsingRound(context.Context, *GetLastNonElapsingRoundRequest) (*GetLastNonElapsingRoundResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error)
	GetLastRound(context.Context, *GetLastRoundRequest) (*GetLastRoundResponse, error)
	mustEmbedUnimplementedRoundServiceServer()
}

// UnimplementedRoundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoundServiceServer struct {
}

func (UnimplementedRoundServiceServer) GetLastNonElapsingRound(context.Context, *GetLastNonElapsingRoundRequest) (*GetLastNonElapsingRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastNonElapsingRound not implemented")
}
func (UnimplementedRoundServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRoundServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedRoundServiceServer) GetLastRound(context.Context, *GetLastRoundRequest) (*GetLastRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastRound not implemented")
}
func (UnimplementedRoundServiceServer) mustEmbedUnimplementedRoundServiceServer() {}

// UnsafeRoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoundServiceServer will
// result in compilation errors.
type UnsafeRoundServiceServer interface {
	mustEmbedUnimplementedRoundServiceServer()
}

func RegisterRoundServiceServer(s grpc.ServiceRegistrar, srv RoundServiceServer) {
	s.RegisterService(&_RoundService_serviceDesc, srv)
}

func _RoundService_GetLastNonElapsingRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastNonElapsingRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).GetLastNonElapsingRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.round.roundpb.RoundService/GetLastNonElapsingRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).GetLastNonElapsingRound(ctx, req.(*GetLastNonElapsingRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoundService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.round.roundpb.RoundService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoundService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.round.roundpb.RoundService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoundService_GetLastRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundServiceServer).GetLastRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.round.roundpb.RoundService/GetLastRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundServiceServer).GetLastRound(ctx, req.(*GetLastRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoundService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.round.roundpb.RoundService",
	HandlerType: (*RoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastNonElapsingRound",
			Handler:    _RoundService_GetLastNonElapsingRound_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _RoundService_GetAll_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _RoundService_GetByID_Handler,
		},
		{
			MethodName: "GetLastRound",
			Handler:    _RoundService_GetLastRound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/round/roundpb/round.proto",
}
