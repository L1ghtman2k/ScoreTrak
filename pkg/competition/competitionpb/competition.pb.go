// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: pkg/competition/competitionpb/competition.proto

package competitionpb

import (
	checkpb "github.com/ScoreTrak/ScoreTrak/pkg/check/checkpb"
	configpb "github.com/ScoreTrak/ScoreTrak/pkg/config/configpb"
	hostpb "github.com/ScoreTrak/ScoreTrak/pkg/host/hostpb"
	host_grouppb "github.com/ScoreTrak/ScoreTrak/pkg/host_group/host_grouppb"
	policypb "github.com/ScoreTrak/ScoreTrak/pkg/policy/policypb"
	propertypb "github.com/ScoreTrak/ScoreTrak/pkg/property/propertypb"
	reportpb "github.com/ScoreTrak/ScoreTrak/pkg/report/reportpb"
	roundpb "github.com/ScoreTrak/ScoreTrak/pkg/round/roundpb"
	servicepb "github.com/ScoreTrak/ScoreTrak/pkg/service/servicepb"
	service_grouppb "github.com/ScoreTrak/ScoreTrak/pkg/service_group/service_grouppb"
	teampb "github.com/ScoreTrak/ScoreTrak/pkg/team/teampb"
	userpb "github.com/ScoreTrak/ScoreTrak/pkg/user/userpb"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Competition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicConfig *configpb.DynamicConfig         `protobuf:"bytes,1,opt,name=dynamic_config,json=dynamicConfig,proto3" json:"dynamic_config,omitempty"`
	Report        *reportpb.Report                `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	HostGroups    []*host_grouppb.HostGroup       `protobuf:"bytes,3,rep,name=host_groups,json=hostGroups,proto3" json:"host_groups,omitempty"`
	Hosts         []*hostpb.Host                  `protobuf:"bytes,4,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Teams         []*teampb.Team                  `protobuf:"bytes,5,rep,name=teams,proto3" json:"teams,omitempty"`
	Services      []*servicepb.Service            `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty"`
	ServiceGroups []*service_grouppb.ServiceGroup `protobuf:"bytes,7,rep,name=service_groups,json=serviceGroups,proto3" json:"service_groups,omitempty"`
	Rounds        []*roundpb.Round                `protobuf:"bytes,8,rep,name=rounds,proto3" json:"rounds,omitempty"`
	Properties    []*propertypb.Property          `protobuf:"bytes,9,rep,name=properties,proto3" json:"properties,omitempty"`
	Checks        []*checkpb.Check                `protobuf:"bytes,10,rep,name=checks,proto3" json:"checks,omitempty"`
	Users         []*userpb.User                  `protobuf:"bytes,11,rep,name=users,proto3" json:"users,omitempty"`
	Policy        *policypb.Policy                `protobuf:"bytes,12,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *Competition) Reset() {
	*x = Competition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Competition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Competition) ProtoMessage() {}

func (x *Competition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Competition.ProtoReflect.Descriptor instead.
func (*Competition) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{0}
}

func (x *Competition) GetDynamicConfig() *configpb.DynamicConfig {
	if x != nil {
		return x.DynamicConfig
	}
	return nil
}

func (x *Competition) GetReport() *reportpb.Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *Competition) GetHostGroups() []*host_grouppb.HostGroup {
	if x != nil {
		return x.HostGroups
	}
	return nil
}

func (x *Competition) GetHosts() []*hostpb.Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Competition) GetTeams() []*teampb.Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Competition) GetServices() []*servicepb.Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Competition) GetServiceGroups() []*service_grouppb.ServiceGroup {
	if x != nil {
		return x.ServiceGroups
	}
	return nil
}

func (x *Competition) GetRounds() []*roundpb.Round {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *Competition) GetProperties() []*propertypb.Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Competition) GetChecks() []*checkpb.Check {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *Competition) GetUsers() []*userpb.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Competition) GetPolicy() *policypb.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type LoadCompetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Competition *Competition `protobuf:"bytes,1,opt,name=competition,proto3" json:"competition,omitempty"`
}

func (x *LoadCompetitionRequest) Reset() {
	*x = LoadCompetitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCompetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCompetitionRequest) ProtoMessage() {}

func (x *LoadCompetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCompetitionRequest.ProtoReflect.Descriptor instead.
func (*LoadCompetitionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{1}
}

func (x *LoadCompetitionRequest) GetCompetition() *Competition {
	if x != nil {
		return x.Competition
	}
	return nil
}

type LoadCompetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoadCompetitionResponse) Reset() {
	*x = LoadCompetitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCompetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCompetitionResponse) ProtoMessage() {}

func (x *LoadCompetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCompetitionResponse.ProtoReflect.Descriptor instead.
func (*LoadCompetitionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{2}
}

type FetchCoreCompetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchCoreCompetitionRequest) Reset() {
	*x = FetchCoreCompetitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCoreCompetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCoreCompetitionRequest) ProtoMessage() {}

func (x *FetchCoreCompetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCoreCompetitionRequest.ProtoReflect.Descriptor instead.
func (*FetchCoreCompetitionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{3}
}

type FetchCoreCompetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Competition *Competition `protobuf:"bytes,1,opt,name=competition,proto3" json:"competition,omitempty"`
}

func (x *FetchCoreCompetitionResponse) Reset() {
	*x = FetchCoreCompetitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCoreCompetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCoreCompetitionResponse) ProtoMessage() {}

func (x *FetchCoreCompetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCoreCompetitionResponse.ProtoReflect.Descriptor instead.
func (*FetchCoreCompetitionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{4}
}

func (x *FetchCoreCompetitionResponse) GetCompetition() *Competition {
	if x != nil {
		return x.Competition
	}
	return nil
}

type FetchEntireCompetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchEntireCompetitionRequest) Reset() {
	*x = FetchEntireCompetitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchEntireCompetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchEntireCompetitionRequest) ProtoMessage() {}

func (x *FetchEntireCompetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchEntireCompetitionRequest.ProtoReflect.Descriptor instead.
func (*FetchEntireCompetitionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{5}
}

type FetchEntireCompetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Competition *Competition `protobuf:"bytes,1,opt,name=competition,proto3" json:"competition,omitempty"`
}

func (x *FetchEntireCompetitionResponse) Reset() {
	*x = FetchEntireCompetitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchEntireCompetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchEntireCompetitionResponse) ProtoMessage() {}

func (x *FetchEntireCompetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchEntireCompetitionResponse.ProtoReflect.Descriptor instead.
func (*FetchEntireCompetitionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{6}
}

func (x *FetchEntireCompetitionResponse) GetCompetition() *Competition {
	if x != nil {
		return x.Competition
	}
	return nil
}

type ResetScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetScoresRequest) Reset() {
	*x = ResetScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetScoresRequest) ProtoMessage() {}

func (x *ResetScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetScoresRequest.ProtoReflect.Descriptor instead.
func (*ResetScoresRequest) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{7}
}

type ResetScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetScoresResponse) Reset() {
	*x = ResetScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetScoresResponse) ProtoMessage() {}

func (x *ResetScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetScoresResponse.ProtoReflect.Descriptor instead.
func (*ResetScoresResponse) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{8}
}

type DeleteCompetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCompetitionRequest) Reset() {
	*x = DeleteCompetitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompetitionRequest) ProtoMessage() {}

func (x *DeleteCompetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompetitionRequest.ProtoReflect.Descriptor instead.
func (*DeleteCompetitionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{9}
}

type DeleteCompetitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCompetitionResponse) Reset() {
	*x = DeleteCompetitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompetitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompetitionResponse) ProtoMessage() {}

func (x *DeleteCompetitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_competition_competitionpb_competition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompetitionResponse.ProtoReflect.Descriptor instead.
func (*DeleteCompetitionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_competition_competitionpb_competition_proto_rawDescGZIP(), []int{10}
}

var File_pkg_competition_competitionpb_competition_proto protoreflect.FileDescriptor

var file_pkg_competition_competitionpb_competition_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x1a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x6b, 0x67, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x70,
	0x62, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x70, 0x62, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x70, 0x6b, 0x67, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x6b, 0x67, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70,
	0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x35, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x2f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x70, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x6b, 0x67, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x62,
	0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6b,
	0x67, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x70, 0x62, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x05, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x2b, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2b,
	0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x62, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x66, 0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x19, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x1c, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x1e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x15, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xca, 0x05, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x14,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x97, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x74, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x54, 0x72, 0x61, 0x6b, 0x2f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6b, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_competition_competitionpb_competition_proto_rawDescOnce sync.Once
	file_pkg_competition_competitionpb_competition_proto_rawDescData = file_pkg_competition_competitionpb_competition_proto_rawDesc
)

func file_pkg_competition_competitionpb_competition_proto_rawDescGZIP() []byte {
	file_pkg_competition_competitionpb_competition_proto_rawDescOnce.Do(func() {
		file_pkg_competition_competitionpb_competition_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_competition_competitionpb_competition_proto_rawDescData)
	})
	return file_pkg_competition_competitionpb_competition_proto_rawDescData
}

var file_pkg_competition_competitionpb_competition_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pkg_competition_competitionpb_competition_proto_goTypes = []interface{}{
	(*Competition)(nil),                    // 0: pkg.competition.competitionpb.Competition
	(*LoadCompetitionRequest)(nil),         // 1: pkg.competition.competitionpb.LoadCompetitionRequest
	(*LoadCompetitionResponse)(nil),        // 2: pkg.competition.competitionpb.LoadCompetitionResponse
	(*FetchCoreCompetitionRequest)(nil),    // 3: pkg.competition.competitionpb.FetchCoreCompetitionRequest
	(*FetchCoreCompetitionResponse)(nil),   // 4: pkg.competition.competitionpb.FetchCoreCompetitionResponse
	(*FetchEntireCompetitionRequest)(nil),  // 5: pkg.competition.competitionpb.FetchEntireCompetitionRequest
	(*FetchEntireCompetitionResponse)(nil), // 6: pkg.competition.competitionpb.FetchEntireCompetitionResponse
	(*ResetScoresRequest)(nil),             // 7: pkg.competition.competitionpb.ResetScoresRequest
	(*ResetScoresResponse)(nil),            // 8: pkg.competition.competitionpb.ResetScoresResponse
	(*DeleteCompetitionRequest)(nil),       // 9: pkg.competition.competitionpb.DeleteCompetitionRequest
	(*DeleteCompetitionResponse)(nil),      // 10: pkg.competition.competitionpb.DeleteCompetitionResponse
	(*configpb.DynamicConfig)(nil),         // 11: pkg.config.config.DynamicConfig
	(*reportpb.Report)(nil),                // 12: pkg.report.reportpb.Report
	(*host_grouppb.HostGroup)(nil),         // 13: pkg.host_group.host_grouppb.HostGroup
	(*hostpb.Host)(nil),                    // 14: pkg.host.hostpb.Host
	(*teampb.Team)(nil),                    // 15: pkg.team.teampb.Team
	(*servicepb.Service)(nil),              // 16: pkg.service.servicepb.Service
	(*service_grouppb.ServiceGroup)(nil),   // 17: pkg.service_group.service_grouppb.ServiceGroup
	(*roundpb.Round)(nil),                  // 18: pkg.round.roundpb.Round
	(*propertypb.Property)(nil),            // 19: pkg.property.propertypb.Property
	(*checkpb.Check)(nil),                  // 20: pkg.check.checkpb.Check
	(*userpb.User)(nil),                    // 21: pkg.user.userpb.User
	(*policypb.Policy)(nil),                // 22: pkg.policy.policypb.Policy
}
var file_pkg_competition_competitionpb_competition_proto_depIdxs = []int32{
	11, // 0: pkg.competition.competitionpb.Competition.dynamic_config:type_name -> pkg.config.config.DynamicConfig
	12, // 1: pkg.competition.competitionpb.Competition.report:type_name -> pkg.report.reportpb.Report
	13, // 2: pkg.competition.competitionpb.Competition.host_groups:type_name -> pkg.host_group.host_grouppb.HostGroup
	14, // 3: pkg.competition.competitionpb.Competition.hosts:type_name -> pkg.host.hostpb.Host
	15, // 4: pkg.competition.competitionpb.Competition.teams:type_name -> pkg.team.teampb.Team
	16, // 5: pkg.competition.competitionpb.Competition.services:type_name -> pkg.service.servicepb.Service
	17, // 6: pkg.competition.competitionpb.Competition.service_groups:type_name -> pkg.service_group.service_grouppb.ServiceGroup
	18, // 7: pkg.competition.competitionpb.Competition.rounds:type_name -> pkg.round.roundpb.Round
	19, // 8: pkg.competition.competitionpb.Competition.properties:type_name -> pkg.property.propertypb.Property
	20, // 9: pkg.competition.competitionpb.Competition.checks:type_name -> pkg.check.checkpb.Check
	21, // 10: pkg.competition.competitionpb.Competition.users:type_name -> pkg.user.userpb.User
	22, // 11: pkg.competition.competitionpb.Competition.policy:type_name -> pkg.policy.policypb.Policy
	0,  // 12: pkg.competition.competitionpb.LoadCompetitionRequest.competition:type_name -> pkg.competition.competitionpb.Competition
	0,  // 13: pkg.competition.competitionpb.FetchCoreCompetitionResponse.competition:type_name -> pkg.competition.competitionpb.Competition
	0,  // 14: pkg.competition.competitionpb.FetchEntireCompetitionResponse.competition:type_name -> pkg.competition.competitionpb.Competition
	1,  // 15: pkg.competition.competitionpb.CompetitionService.LoadCompetition:input_type -> pkg.competition.competitionpb.LoadCompetitionRequest
	3,  // 16: pkg.competition.competitionpb.CompetitionService.FetchCoreCompetition:input_type -> pkg.competition.competitionpb.FetchCoreCompetitionRequest
	5,  // 17: pkg.competition.competitionpb.CompetitionService.FetchEntireCompetition:input_type -> pkg.competition.competitionpb.FetchEntireCompetitionRequest
	7,  // 18: pkg.competition.competitionpb.CompetitionService.ResetScores:input_type -> pkg.competition.competitionpb.ResetScoresRequest
	9,  // 19: pkg.competition.competitionpb.CompetitionService.DeleteCompetition:input_type -> pkg.competition.competitionpb.DeleteCompetitionRequest
	2,  // 20: pkg.competition.competitionpb.CompetitionService.LoadCompetition:output_type -> pkg.competition.competitionpb.LoadCompetitionResponse
	4,  // 21: pkg.competition.competitionpb.CompetitionService.FetchCoreCompetition:output_type -> pkg.competition.competitionpb.FetchCoreCompetitionResponse
	6,  // 22: pkg.competition.competitionpb.CompetitionService.FetchEntireCompetition:output_type -> pkg.competition.competitionpb.FetchEntireCompetitionResponse
	8,  // 23: pkg.competition.competitionpb.CompetitionService.ResetScores:output_type -> pkg.competition.competitionpb.ResetScoresResponse
	10, // 24: pkg.competition.competitionpb.CompetitionService.DeleteCompetition:output_type -> pkg.competition.competitionpb.DeleteCompetitionResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pkg_competition_competitionpb_competition_proto_init() }
func file_pkg_competition_competitionpb_competition_proto_init() {
	if File_pkg_competition_competitionpb_competition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_competition_competitionpb_competition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Competition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCompetitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCompetitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCoreCompetitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCoreCompetitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchEntireCompetitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchEntireCompetitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompetitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_competition_competitionpb_competition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompetitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_competition_competitionpb_competition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_competition_competitionpb_competition_proto_goTypes,
		DependencyIndexes: file_pkg_competition_competitionpb_competition_proto_depIdxs,
		MessageInfos:      file_pkg_competition_competitionpb_competition_proto_msgTypes,
	}.Build()
	File_pkg_competition_competitionpb_competition_proto = out.File
	file_pkg_competition_competitionpb_competition_proto_rawDesc = nil
	file_pkg_competition_competitionpb_competition_proto_goTypes = nil
	file_pkg_competition_competitionpb_competition_proto_depIdxs = nil
}
