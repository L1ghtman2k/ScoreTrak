syntax = "proto3";
package pkg.competition.competitionpb;

import "pkg/config/configpb/config.proto";
import "pkg/report/reportpb/report.proto";
import "pkg/host_group/host_grouppb/host_group.proto";
import "pkg/host/hostpb/host.proto";
import "pkg/team/teampb/team.proto";
import "pkg/service/servicepb/service.proto";
import "pkg/service_group/service_grouppb/service_group.proto";
import "pkg/round/roundpb/round.proto";
import "pkg/property/propertypb/property.proto";
import "pkg/check/checkpb/check.proto";
import "pkg/user/userpb/user.proto";
import "pkg/policy/policypb/policy.proto";

option go_package = "github.com/ScoreTrak/ScoreTrak/pkg/competition/competitionpb";

message Competition {
  pkg.config.config.DynamicConfig dynamic_config = 1;
  pkg.report.reportpb.Report report = 2;
  repeated  pkg.host_group.host_grouppb.HostGroup host_groups = 3;
  repeated  pkg.host.hostpb.Host hosts = 4;
  repeated  pkg.team.teampb.Team teams = 5;
  repeated  pkg.service.servicepb.Service services = 6;
  repeated  pkg.service_group.service_grouppb.ServiceGroup service_groups = 7;
  repeated  pkg.round.roundpb.Round rounds = 8;
  repeated  pkg.property.propertypb.Property properties = 9;
  repeated  pkg.check.checkpb.Check checks = 10;
  repeated  pkg.user.userpb.User users = 11;
  pkg.policy.policypb.Policy policy = 12;
}

message LoadCompetitionRequest{
  Competition competition = 1;
}
message LoadCompetitionResponse{}

message FetchCoreCompetitionRequest{}

message FetchCoreCompetitionResponse{
  Competition competition = 1;
}

message FetchEntireCompetitionRequest{}

message FetchEntireCompetitionResponse{
  Competition competition = 1;
}

message ResetScoresRequest{}
message ResetScoresResponse{}

message DeleteCompetitionRequest{}
message DeleteCompetitionResponse{}

service CompetitionService{
  rpc LoadCompetition(LoadCompetitionRequest) returns (LoadCompetitionResponse){}
  rpc FetchCoreCompetition(FetchCoreCompetitionRequest) returns (FetchCoreCompetitionResponse){}
  rpc FetchEntireCompetition(FetchEntireCompetitionRequest) returns (FetchEntireCompetitionResponse){}
  rpc ResetScores(ResetScoresRequest) returns (ResetScoresResponse) {}
  rpc DeleteCompetition(DeleteCompetitionRequest) returns (DeleteCompetitionResponse) {}
}