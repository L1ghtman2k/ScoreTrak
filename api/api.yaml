swagger: "2.0"
info:
  description: "Swagger representation of ScoreTrak's Mater API"
  version: "1.0.0"
  title: "ScoreTrak Mater API"
tags:
  - name: "Engine"
  - name: "Score"
  - name: "Team"
  - name: "HostGroup"
  - name: "Host"
  - name: "Service Group"
  - name: "Service"
  - name: "Round"
  - name: "Property"
  - name: "Check"
schemes:
  - "https"
  - "http"


paths:


  /check/{TeamId}/{RoundId}:
    get:
      tags:
        - "Check"
      summary: "Retreive total number of rounds"
      description: "Orders scoring engine to return total number of rounds"
      operationId: "GetCheck"
      parameters:
        - name: "TeamId"
          in: "path"
          description: "ID of a Team"
          required: true
          type: "integer"
          format: "int64"
        - name: "RoundId"
          in: "path"
          description: "ID of a Round"
          required: true
          type: "integer"
          format: "int64"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/check"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []

  /score:
    get:
      tags:
        - "Score"
      summary: "Retreive all Scores"
      description: "Orders scoring engine to retrive all scores"
      operationId: "GetScore"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/score"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []


  /round:
    get:
      tags:
        - "Round"
      summary: "Retreive total number of rounds"
      description: "Orders scoring engine to return total number of rounds"
      operationId: "GetRoundNumber"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: object
            properties:
              total_rounds:
                type: "integer"
                format: "int64"
                example: "20"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []

  /engine:
    get:
      tags:
        - "Engine"
      summary: "Retreive all properties"
      description: "Orders scoring engine to return all properties"
      operationId: "GetEngineProperties"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/engine"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []
    put:
      tags:
        - "Engine"
      summary: "Update Engine properties"
      description: "Orders scoring engine to update Engine columns in a database"
      operationId: "AddEngineProperties"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Engine Properties that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/engine"
      responses:
        "200":
          description: "successful operation"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Invalid input"
      security:
        - api_key: []


  /host:
    get:
      tags:
        - "Host"
      summary: "Retreive all properties"
      description: "Orders scoring engine to return all properties"
      operationId: "GetHosts"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/host"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - "Host"
      summary: "Add a new Host"
      description: "Orders scoring engine to create a host entry in a database"
      operationId: "AddHost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Host object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/host"
      responses:
        "201":
          description: "Object Created"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Invalid input"
      security:
        - api_key: []

  /host/{hostId}:
    get:
      tags:
        - "Host"
      summary: "Get a Host"
      description: "Gets a Host based on ID"
      operationId: "GetHost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "hostId"
          in: "path"
          description: "ID of Host to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/host"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Host not found"
      security:
        - api_key: []

    put:
      tags:
        - "Host"
      summary: "Update a Host"
      description: "Updates the Host based on ID"
      operationId: "UpdateHost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "hostId"
          in: "path"
          description: "ID of Host to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Host object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/host"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Host not found"
      security:
        - api_key: []

    delete:
      tags:
        - "Host"
      summary: "Delete a Host"
      description: "Deletes a Host Group from based on ID"
      operationId: "DeleteHost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "hostId"
          in: "path"
          description: "ID of Host Host to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Host not found"
      security:
        - api_key: []


  /host_group:
    get:
      tags:
        - "HostGroup"
      summary: "Retreive all properties"
      description: "Orders scoring engine to return all properties"
      operationId: "GetHostGroups"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/host_group"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - "HostGroup"
      summary: "Add a new Host Group"
      description: "Orders scoring engine to create a host_group entry in a database"
      operationId: "AddHostGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Host Group object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/host_group"
      responses:
        "201":
          description: "Object Created"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Invalid input"
      security:
        - api_key: []

  /host_group/{host_groupId}:
    get:
      tags:
        - "HostGroup"
      summary: "Get a Host Group"
      description: "Gets a Host Group based on ID"
      operationId: "GetHostGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "host_groupId"
          in: "path"
          description: "ID of Host Group to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/host_group"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "HostGroup not found"
      security:
        - api_key: []

    put:
      tags:
        - "HostGroup"
      summary: "Update a Host Group"
      description: "Updates the Host Group based on ID"
      operationId: "UpdateHostGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "host_groupId"
          in: "path"
          description: "ID of Host Group to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "HostGroup object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/host_group"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "HostGroup not found"
      security:
        - api_key: []

    delete:
      tags:
        - "HostGroup"
      summary: "Delete a Host Group"
      description: "Deletes a Host Group from based on ID"
      operationId: "DeleteHostGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "host_groupId"
          in: "path"
          description: "ID of Host HostGroup to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "HostGroup not found"
      security:
        - api_key: []







  /team:
    get:
      tags:
        - "Team"
      summary: "Retreive all Teams"
      description: "Orders scoring engine to return all teams"
      operationId: "GetTeams"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/team"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - "Team"
      summary: "Add a new team"
      description: "Orders scoring engine to create a team entry in a database"
      operationId: "AddTeam"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Team object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/team"
      responses:
        "201":
          description: "Object Created"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Invalid input"
      security:
        - api_key: []

  /team/{TeamId}:
    get:
      tags:
        - "Team"
      summary: "Get a team"
      description: "Gets a team based on External ID"
      operationId: "GetTeam"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "TeamId"
          in: "path"
          description: "External ID of team to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/team"

        "400":
          description: "Invalid External ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Team not found"
      security:
        - api_key: []

    put:
      tags:
        - "Team"
      summary: "Update a team"
      description: "Updates the team based on External ID"
      operationId: "UpdateTeam"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "TeamId"
          in: "path"
          description: "External ID of team to update"
          required: true
          type: "integer"
          format: "int64"

        - in: "body"
          name: "body"
          description: "Team object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/team"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid External ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Team not found"
      security:
        - api_key: []

    delete:
      tags:
        - "Team"
      summary: "Deletes a team"
      description: "Deletes a team from based on External ID"
      operationId: "DelteTeam"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "TeamId"
          in: "path"
          description: "External ID of team to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid External ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Team not found"
      security:
        - api_key: []








  /service_group:
    get:
      tags:
        - "Service Group"
      summary: "Retreive all Service Groups"
      description: "Orders scoring engine to return all scoring groups"
      operationId: "GetServiceGroups"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/service_group"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - "Service Group"
      summary: "Add a new service group"
      description: "Orders scoring engine to create a service group entry in a database"
      operationId: "AddServiceGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Service Group object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/service_group"
      responses:
        "201":
          description: "Object Created"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Invalid input"
      security:
        - api_key: []

  /service_group/{serviceGroupId}:
    get:
      tags:
        - "Service Group"
      summary: "Get a service group"
      description: "Gets a service group from based on ID"
      operationId: "GetServiceGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "serviceGroupId"
          in: "path"
          description: "ID of service group to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/service_group"

        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Service group not found"
      security:
        - api_key: []

    put:
      tags:
        - "Service Group"
      summary: "Update a service group"
      description: "Updates the service group based on ID"
      operationId: "UpdateServiceGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "serviceGroupId"
          in: "path"
          description: "ID of service group to update"
          required: true
          type: "integer"
          format: "int64"

        - in: "body"
          name: "body"
          description: "Service Group object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/service_group"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Service group not found"
      security:
        - api_key: []

    delete:
      tags:
        - "Service Group"
      summary: "Deletes a service group"
      description: "Deletes a service group from based on ID"
      operationId: "DeleteServiceGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "serviceGroupId"
          in: "path"
          description: "ID of service group to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Service group not found"
      security:
        - api_key: []

  /service:
    get:
      tags:
        - "Service"
      summary: "Retreive all Services"
      description: "Orders scoring engine to return all scoring services"
      operationId: "GetServices"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/service"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - "Service"
      summary: "Add a new service"
      description: "Orders scoring engine to create a service entry in a database"
      operationId: "AddService"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Service object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/service"
      responses:
        "201":
          description: "Object Created"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Invalid input"
      security:
        - api_key: []

  /service/{serviceId}:
    get:
      tags:
        - "Service"
      summary: "Get a service"
      description: "Gets a service based on ID"
      operationId: "GetService"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/service"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Service not found"
      security:
        - api_key: []

    put:
      tags:
        - "Service"
      summary: "Update a service"
      description: "Updates the service based on ID"
      operationId: "UpdateService"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Service object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/service"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Service not found"
      security:
        - api_key: []

    delete:
      tags:
        - "Service"
      summary: "Delete a service"
      description: "Gets a service from based on ID"
      operationId: "DeleteService"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "serviceId"
          in: "path"
          description: "ID of service to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Service not found"
      security:
        - api_key: []


  /property:
    get:
      tags:
        - "Property"
      summary: "Retreive all properties"
      description: "Orders scoring engine to return all properties"
      operationId: "GetProperties"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/property"
        "401":
          $ref: '#/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - "Property"
      summary: "Add a new property"
      description: "Orders scoring engine to create a property entry in a database"
      operationId: "AddProprty"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Property object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/property"
      responses:
        "201":
          description: "Object Created"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "405":
          description: "Invalid input"
      security:
        - api_key: []

  /property/{propertyId}:
    get:
      tags:
        - "Property"
      summary: "Get a property"
      description: "Gets a property based on ID"
      operationId: "GetProperty"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "propertyId"
          in: "path"
          description: "ID of property to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/property"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Property not found"
      security:
        - api_key: []

    put:
      tags:
        - "Property"
      summary: "Update a property"
      description: "Updates the property based on ID"
      operationId: "UpdateProperty"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "propertyId"
          in: "path"
          description: "ID of property to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Property object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/property"

      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "Property not found"
      security:
        - api_key: []

    delete:
      tags:
        - "Property"
      summary: "Delete a property"
      description: "Deletes a property from based on ID"
      operationId: "DeleteProperty"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "propertyId"
          in: "path"
          description: "ID of property to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "401":
          $ref: '#/responses/UnauthorizedError'
        "404":
          description: "HostGroup not found"
      security:
        - api_key: []


definitions:

  engine:
    type: "object"
    properties:
      round_units:
        type: "integer"
        format: "int64"
        example: "20"
      enabled:
        type: "boolean"

  score:
    type: "object"
    properties:
      team_id:
        type: "integer"
        format: "int64"
        example: "20"
      score:
        type: "integer"
        format: "int64"
        example: "1000"

  team:
    type: "object"
    required:
      - "external_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      enabled:
        type: "boolean"

  host_group:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      enabled:
        type: "boolean"

  host:
    type: "object"
    required:
      - "hostname"
    properties:
      id:
        type: "integer"
        format: "int64"
      address:
        type: "string"
      host_group_id:
        type: "integer"
        format: "int64"
      team_id:
        type: "integer"
        format: "int64"
      enabled:
        type: "boolean"


  service_group:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "External Scoring Group"
      label:
        type: "string"
        example: "external"
      enabled:
        type: "boolean"
        description: "Enables or Disables the service"
        default: True

  service:
    type: "object"
    required:
      - "name"
      - "points"
      - "service_group_id"
      - "host_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "FTP Windows"
      points:
        type: "integer"
        format: "int64"
        example: "20"
      round_units:
        type: "integer"
        format: "int64"
        example: "5"
      round_delay:
        type: "integer"
        format: "int64"
        example: "2"
      service_group_id:
        type: "integer"
        format: "int64"
        example: "333"
      host_id:
        type: "integer"
        format: "int64"
        example: "444"
      edit_host:
        type: "boolean"
        example: "true"
        description: "Enables to Edit the hostname"
      enabled:
        type: "boolean"
        description: "Enables or Disables the service"
        default: True

  property:
    type: "object"
    required:
      - "name"
      - "service_id"
      - "value"
    properties:
      id:
        type: "integer"
        format: "int64"
      service_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "username"
      value:
        type: "string"
        example: "(Encoded username)"
      status:
        type: "string"
        example: "View"

  check:
    type: "object"
    required:
      - "hostname"
    properties:
      id:
        type: "integer"
        format: "int64"
      service_id:
        type: "integer"
        format: "int64"
      round_id:
        type: "integer"
        format: "int64"
      log:
        type: "string"
      passed:
        type: "boolean"

responses:
  UnauthorizedError:
    description: Authentication token is missing, or incorrect
    headers:
      WWW_Authenticate:
        type: string

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"